package com.wolfWallet.service;

import com.wolfWallet.exception.DuplicateResourceException;
import com.wolfWallet.model.dto.AuthRequest;
import com.wolfWallet.model.dto.AuthResponse;
import com.wolfWallet.model.dto.RegisterRequest;
import com.wolfWallet.model.entity.User;
import com.wolfWallet.model.entity.UserRole;
import com.wolfWallet.repository.UserRepository;
import com.wolfWallet.security.JwtUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * üîê Service d'authentification
 *
 * G√®re :
 * - L'inscription des nouveaux utilisateurs
 * - La connexion avec g√©n√©ration de token JWT
 */
@Service
@RequiredArgsConstructor
@Transactional
public class AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;
    private final AuthenticationManager authenticationManager;

    /**
     * üìù Inscription d'un nouvel utilisateur
     */
    public AuthResponse register(RegisterRequest request) {

        // 1Ô∏è‚É£ V√©rifier si l'email existe d√©j√†
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new DuplicateResourceException("Cet email est d√©j√† utilis√© : " + request.getEmail());
        }

        // 2Ô∏è‚É£ Cr√©er le nouvel utilisateur
        User user = new User();
        user.setEmail(request.getEmail());
        user.setPassword(passwordEncoder.encode(request.getPassword())); // ‚úÖ Hash du mot de passe
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setCurrency(request.getCurrency() != null ? request.getCurrency() : "EUR");
        user.setRole(UserRole.USER); // ‚úÖ R√¥le par d√©faut
        user.setActive(true);

        // 3Ô∏è‚É£ Sauvegarder en base
        User savedUser = userRepository.save(user);

        // 4Ô∏è‚É£ G√©n√©rer le token JWT
        String token = jwtUtil.generateToken(savedUser.getEmail(), savedUser.getRole().name());

        // 5Ô∏è‚É£ Retourner la r√©ponse avec le token
        return AuthResponse.builder()
                .token(token)
                .type("Bearer")
                .email(savedUser.getEmail())
                .role(savedUser.getRole().name())
                .userId(savedUser.getId())
                .build();
    }

    /**
     * üîë Connexion d'un utilisateur existant
     */
    public AuthResponse login(AuthRequest request) {

        // 1Ô∏è‚É£ Authentifier l'utilisateur (v√©rifier email + password)
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        request.getEmail(),
                        request.getPassword()
                )
        );

        // 2Ô∏è‚É£ Si on arrive ici, l'authentification a r√©ussi
        // R√©cup√©rer l'utilisateur depuis la base
        User user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> new RuntimeException("Utilisateur non trouv√©"));

        // 3Ô∏è‚É£ G√©n√©rer le token JWT
        String token = jwtUtil.generateToken(user.getEmail(), user.getRole().name());

        // 4Ô∏è‚É£ Retourner la r√©ponse avec le token
        return AuthResponse.builder()
                .token(token)
                .type("Bearer")
                .email(user.getEmail())
                .role(user.getRole().name())
                .userId(user.getId())
                .build();
    }
}